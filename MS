#include <stdio.h>
#include <string>
#include <windows.h>
#include <iostream>
#include <stack>//library untuk operasi stack
#include <queue> //library untuk operasi queue
#include <time.h>
using namespace std;

struct peta { //inisiasi peta 
	int peta[7][7]; //inisiasi peta, dilebihkan 1 untuk NULL
	stack<int> atribut; //inisiasi stack
	stack<int> tabelJalurX;
	stack<int> tabelJalurY;
	stack<int> tabelForbidenX;
	stack<int> tabelForbidenY;
	stack<int> tabelPercabanganX;
	stack<int> tabelPercabanganY;
	queue<int> atribute; //inisiasi queue
};

int ratX = 0, ratY = 0;

void forbidden() {
	peta* init;
	init = new peta;
	int temp1, temp2;
	init->tabelForbidenX.push(ratX);
	init->tabelForbidenY.push(ratY);
	init->tabelJalurX.pop();
	init->tabelJalurY.pop();
	temp1 = init->tabelJalurX.top();
	temp2 = init->tabelJalurY.top();
	ratX = temp1;
	ratX = temp2;
	
}



void push() {
	peta* init;
	init = new peta;
	init->tabelJalurX.push(ratX);
	init->tabelJalurY.push(ratY);
}

void movRat() {
	peta* init;
	bool failed = false;
	init = new peta;
	init->peta[0][0] = 0;
	init->peta[0][1] = 8;
	init->peta[0][2] = 4;
	init->peta[0][3] = 4;
	init->peta[0][4] = 0;
	init->peta[0][5] = 8;

	init->peta[1][0] = 6;
	init->peta[1][1] = 6;
	init->peta[1][2] = 6;
	init->peta[1][3] = 4;
	init->peta[1][4] = 6;
	init->peta[1][5] = 0;

	init->peta[2][0] = 0;
	init->peta[2][1] = 8;
	init->peta[2][2] = 0;
	init->peta[2][3] = 6;
	init->peta[2][4] = 4;
	init->peta[2][5] = 8;

	init->peta[3][0] = 5;
	init->peta[3][1] = 5;
	init->peta[3][2] = 5;
	init->peta[3][3] = 6;
	init->peta[3][4] = 6;
	init->peta[3][5] = 0;

	init->peta[4][0] = 0;
	init->peta[4][1] = 7;
	init->peta[4][2] = 6;
	init->peta[4][3] = 7;
	init->peta[4][4] = 7;
	init->peta[4][5] = 5;

	init->peta[5][0] = 7;
	init->peta[5][1] = 5;
	init->peta[5][2] = 6;
	init->peta[5][3] = 6;
	init->peta[5][4] = 6;
	init->peta[5][5] = 9;

	//inisiasi karakter tiap node dalam peta
	//0 = bawah, 1 = atas, 2 = kiri, 3 = kanan
	//4 = atas kiri, 5 = bawah kiri, 6 = bawah kanan, 7 = atas kanan
	//8 = halangan

	init->tabelJalurX.push(ratX);
	init->tabelJalurY.push(ratY);
	int borderX = 0, borderY = 0;
	int finishX = 5, finishY = 5;
	while (failed != true) {
		if ((ratX >= 0 && ratY >= 0) && (ratX < 6 && ratY < 6)) {
			if (init->peta[ratY][ratX] == 0) {
				ratY++;
				push();
			}
			else if (init->peta[ratY][ratX] == 1 || init->peta[ratY][ratX] == 2 ) {
				forbidden();
			}
			else if (init->peta[ratY][ratX] == 3) {
				ratX++;
				push();
			}
			else if (init->peta[ratY][ratX] == 4) {
				init->tabelPercabanganX.push(ratX);
				init->tabelPercabanganY.push(ratY);
				forbidden();

			}
			else if (init->peta[ratY][ratX] == 5) {
				ratY++;
				push();
			}
			else if (init->peta[ratY][ratX] == 6) {
				int random = rand() % 2;
				if (random == 0) {
					ratX++;
					push();
				}
				else if (random == 1) {
					ratY++;
					push();
				}
				
			}
			else if (init->peta[ratY][ratX] == 7) {
				ratX++;
				push();
			}
			else if (init->peta[ratY][ratX] == 8) {
				forbidden();
			}

			
			else {
				int random = rand() % 2;
				if (random == 0) {
					ratX++;
					push();
				}
				else if(random ==1) {
					ratY++;
					push();
				}
			}
			cout << "Posisi Tom di :" << ratX << " " << ratY << endl;
		}
	}
}

void Queue() {
	peta* init;
	init = new peta; //memori dinamis untuk pembuatan queue
	system("cls");
	int input;
	cout << "Masukkan input : " << endl;
	for (int i = 0; i <= 3; i++) {
		cin >> input;
		init->atribute.push(input); //push ke dalam queue
	}
	cout << "Output : " << init->atribute.front() << endl; //cetak elemen terdepan
	movRat();
}

void Stack() {
	//memori dinamis untuk pembuatan queue
	peta* init;
	init = new peta;
	system("cls");
	int input;
	cout << "Masukkan input : " << endl;
	for (int i = 0; i <= 3; i++) {
		cin >> input;
		init->atribut.push(input); //push ke dalam stack
	}
	cout << "Output : " << init->atribut.top(); //cetak elemen teratas

	//movRat();

}


void main() {
	peta init;
	int pilihan;
	cout << "======================" << endl;
	cout << "Maze Solver" << endl;
	cout << "======================" << endl;
	/*
	cout << "1. Stack" << endl << "2. Queue" << endl;
	cin >> pilihan;
	switch (pilihan)
	{
	case 1:
		Stack();
		break;
	case 2:
		Queue();
		break;
	default:
		cout << "Masukkan anda kurang benar";
		break;
	}
	*/
	movRat();
}
